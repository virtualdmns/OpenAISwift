import Foundation

/// Models for the Embeddings API
@available(iOS 14.0, macOS 11.0, *)
public enum EmbeddingsModels {
    /// Request for the embeddings API
    public struct EmbeddingsRequest: Codable {
        /// The model to use
        public let model: String
        
        /// The input to embed
        public let input: [String]
        
        /// The user identifier
        public let user: String?
        
        /// Creates a new embeddings request
        /// - Parameters:
        ///   - model: The model to use (e.g., "text-embedding-ada-002")
        ///   - input: The input to embed
        ///   - user: The user identifier
        public init(model: String, input: [String], user: String? = nil) {
            self.model = model
            self.input = input
            self.user = user
        }
    }
    
    /// Response from the embeddings API
    public struct EmbeddingsResponse: Decodable {
        /// The object type
        public let object: String
        
        /// The model used
        public let model: String
        
        /// The embeddings generated
        public let data: [Embedding]
        
        /// The usage statistics
        public let usage: Usage
        
        /// An embedding generated by the model
        public struct Embedding: Decodable {
            /// The index of the embedding
            public let index: Int
            
            /// The object type
            public let object: String
            
            /// The embedding vector
            public let embedding: [Double]
        }
        
        /// Usage statistics for the request
        public struct Usage: Decodable {
            /// The number of prompt tokens used
            public let promptTokens: Int
            
            /// The total number of tokens used
            public let totalTokens: Int
            
            enum CodingKeys: String, CodingKey {
                case promptTokens = "prompt_tokens"
                case totalTokens = "total_tokens"
            }
        }
    }
}